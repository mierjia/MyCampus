{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport App from './App.vue';\nimport './plugins/element.js';\nimport router from './router';\nimport ElementUI from 'element-ui';\n\n//ecahrs\nimport ECharts from 'vue-echarts';\nimport 'echarts/lib/chart/line';\nimport 'echarts/lib/chart/pie';\nimport 'echarts/lib/chart/bar';\nVue.component('chart', ECharts);\nimport './assets/css/ali.css';\n// //粒子特效   npm install vue-particles --save-dev\n// import VueParticles from 'vue-particles'\n// Vue.use(VueParticles)\n//vuex\nimport Vuex from 'vuex';\nimport store from './store';\nVue.use(Vuex);\n//导入时间插件\nimport moment from 'moment';\n//定义全局时间过滤器\nVue.filter('dataFormat', function (datastr, pattern = 'YYYY-MM-DD HH:mm') {\n  return moment(datastr).format(pattern);\n});\nVue.config.productionTip = false;\n// aiox需要的包\nimport axios from 'axios';\nimport ipconfig from '../../ipconfig.js';\n// axios.defaults.withCredentials = true\n//aciox基础url\naxios.defaults.baseURL = 'http://' + ipconfig.localIP + ':3000';\n\n//将axios写成vue的原型属性\nVue.prototype.$axios = axios;\n//为post请求设置默认请求头\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n//vue2中使用axios，我们请求的参数仍为json类型，是并没有序列化的。我们需要使用querystring解决该问题\nimport qs from 'qs';\nVue.prototype.qs = qs;\n\n// 添加一个请求拦截器\n// http request 拦截器\naxios.interceptors.request.use(config => {\n  let admin_jwt_token = window.localStorage.getItem('admin_jwt_token');\n  config.headers.Authorization = `Bearer ${admin_jwt_token}`;\n  return config;\n}, err => {\n  return Promise.reject(err);\n});\n\n// 添加一个响应拦截器\naxios.interceptors.response.use(function (response) {\n  if (response.data && response.data.code) {\n    if (parseInt(response.data.code) === 401) {\n      //未登录\n      ElementUI.Notification({\n        title: '警告',\n        message: '登录过期请重新登录',\n        type: 'warning'\n      });\n      // store.dispatch('user/deleteuserinfo')//清除用户信息\n      router.push('/login');\n    }\n    if (parseInt(response.data.code) === -1) {\n      ElementUI.Notification({\n        title: '警告',\n        message: '请求失败',\n        type: 'warning'\n      });\n    }\n  }\n  return response;\n}, function (error) {\n  // Do something with response error\n  ElementUI.Notification({\n    title: '警告',\n    message: '服务器连接失败',\n    type: 'warning'\n  });\n  return Promise.reject(error);\n});\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app');","map":{"version":3,"names":["Vue","App","router","ElementUI","ECharts","component","Vuex","store","use","moment","filter","datastr","pattern","format","config","productionTip","axios","ipconfig","defaults","baseURL","localIP","prototype","$axios","headers","post","qs","interceptors","request","admin_jwt_token","window","localStorage","getItem","Authorization","err","Promise","reject","response","data","code","parseInt","Notification","title","message","type","push","error","render","h","$mount"],"sources":["E:/download/InterConnect/admin/src/main.js"],"sourcesContent":["import Vue from 'vue'\nimport App from './App.vue'\nimport './plugins/element.js'\nimport router from './router'\nimport ElementUI from 'element-ui'\n\n//ecahrs\nimport ECharts from 'vue-echarts'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/chart/pie'\nimport 'echarts/lib/chart/bar'\n\nVue.component('chart', ECharts)\nimport './assets/css/ali.css'\n// //粒子特效   npm install vue-particles --save-dev\n// import VueParticles from 'vue-particles'\n// Vue.use(VueParticles)\n//vuex\nimport Vuex from 'vuex'\nimport store from './store'\nVue.use(Vuex)\n//导入时间插件\nimport moment from 'moment'\n//定义全局时间过滤器\nVue.filter('dataFormat', function(datastr, pattern = 'YYYY-MM-DD HH:mm') {\n  return moment(datastr).format(pattern)\n})\nVue.config.productionTip = false\n// aiox需要的包\nimport axios from 'axios'\nimport ipconfig from '../../ipconfig.js'\n// axios.defaults.withCredentials = true\n//aciox基础url\naxios.defaults.baseURL = 'http://'+ ipconfig.localIP +':3000'\n\n//将axios写成vue的原型属性\nVue.prototype.$axios = axios\n//为post请求设置默认请求头\naxios.defaults.headers.post['Content-Type'] =\n  'application/x-www-form-urlencoded; charset=UTF-8'\n//vue2中使用axios，我们请求的参数仍为json类型，是并没有序列化的。我们需要使用querystring解决该问题\nimport qs from 'qs'\nVue.prototype.qs = qs\n\n// 添加一个请求拦截器\n// http request 拦截器\naxios.interceptors.request.use(\n  config => {\n    let admin_jwt_token = window.localStorage.getItem('admin_jwt_token')\n    config.headers.Authorization = `Bearer ${admin_jwt_token}`\n    return config\n  },\n  err => {\n    return Promise.reject(err)\n  }\n)\n\n// 添加一个响应拦截器\naxios.interceptors.response.use(\n  function(response) {\n    if (response.data && response.data.code) {\n      if (parseInt(response.data.code) === 401) {\n        //未登录\n        ElementUI.Notification({\n          title: '警告',\n          message: '登录过期请重新登录',\n          type: 'warning'\n        })\n        // store.dispatch('user/deleteuserinfo')//清除用户信息\n        router.push('/login')\n      }\n      if (parseInt(response.data.code) === -1) {\n        ElementUI.Notification({\n          title: '警告',\n          message: '请求失败',\n          type: 'warning'\n        })\n      }\n    }\n    return response\n  },\n  function(error) {\n    // Do something with response error\n    ElementUI.Notification({\n      title: '警告',\n      message: '服务器连接失败',\n      type: 'warning'\n    })\n    return Promise.reject(error)\n  }\n)\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app')\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}